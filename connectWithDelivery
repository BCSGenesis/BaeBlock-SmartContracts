// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

contract Payment {
// 변수선언 -----------------------------------------------------------------------
    address public owner;

    constructor(){
        owner = msg.sender;
    }

    //고객 구조체
    struct Customer {
        address customerWallet;
        Basket basket;
        Order currentOrder;
    }

    //가게 구조체
    struct Store {
        address storeWallet; 
        string storeName;
        string storeAddress;
        Menu[] menuList;
    }

    //배달원 구조체
    struct Rider {
        address riderWallet;
        Order[] orders;
    }

    //메뉴 구조체
    struct Menu {
        string name;
        uint price;
    }

    //장바구니 구조체
    struct Basket {
        address storeAddr;
        Menu[] menuNames;
        uint foodPrice;
        uint deliveryFee;
    }

    //주문 구조체
    struct Order {
        uint orderID;
        address cus_wallet;
        address sto_wallet;
        address rid_wallet;
        Menu[] menuName;
        // uint foodPrice;
        // uint deliveryFee;
        // uint deliveryTip;
        orderState status;
    }

    enum orderState{
        order,
        store_accept,
        store_decline,
        store_cookFinish,
        rider_matching,
        rider_inDelivery,
        rider_deliveryComplete
    }

    //고객들 저장된 맵핑
    mapping(address => Customer) customers;
    //가게들 저장된 배열(가게주인들이 조회할 수 있음)
    mapping(address=>Store) stores;
    //배달원들 저장된 맵핑
    mapping(address => Rider) riders;
    //주문 목록
    Order[] orderList;
    //배달대기목록 
    Order[] deliveryWaitingList;

// 정보등록 -----------------------------------------------------------------------
    //가게(점주) 회원가입
    function storeRegist(string memory _storeName, string memory _storeAddress) public  {
        (stores[msg.sender].storeWallet, stores[msg.sender].storeName, stores[msg.sender].storeAddress)=(msg.sender,_storeName,_storeAddress);
    }

    //가게 메뉴 등록 기능
    function MenuRegist(string[] memory _menuName, uint[] memory _menuPrice)public {
       require(stores[msg.sender].storeWallet==msg.sender);
       require(_menuName.length == _menuPrice.length);

        for(uint i=0;i<_menuName.length;i++){
            stores[msg.sender].menuList.push(Menu( _menuName[i],_menuPrice[i]));
        }
    }

    //고객 회원가입
    function customerRegist() public {
        (customers[msg.sender].customerWallet)=(msg.sender);
    }
    //배달원 회원가입
    function riderRegist() public {
        (riders[msg.sender].riderWallet)=(msg.sender);
    }

// 주문 ------------------------------------------------------------------------------
    //(고객)장바구니에 메뉴 담기
    function ordering(address _storeWallet, string memory _foodName,uint _price,uint _count)public {
        require(customers[msg.sender].basket.storeAddr == stores[ _storeWallet].storeWallet || customers[msg.sender].basket.menuNames.length==0);
            if(customers[msg.sender].basket.menuNames.length==0){
                customers[msg.sender].basket.storeAddr = _storeWallet;
            }
            for(uint i;i<_count;i++){
                customers[msg.sender].basket.menuNames.push(Menu(_foodName, _price));
            }
            customers[msg.sender].basket.foodPrice= 1 ether/*menuTotalPriceForBasket()*/;
            customers[msg.sender].basket.deliveryFee= 1 ether/*setDeliveryFee()*/;  
    }
//작성 중...
}
